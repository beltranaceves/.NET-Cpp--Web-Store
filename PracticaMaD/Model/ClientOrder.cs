
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Es.Udc.DotNet.PracticaMad.Model
{

using System;
    using System.Text;
    using System.Collections.Generic;
    
public partial class ClientOrder
{

    public ClientOrder()
    {

        this.ClientOrderLine = new HashSet<ClientOrderLine>();

    }


    public long orderId { get; set; }

    public System.DateTime orderDate { get; set; }

    public string orderName { get; set; }

    public string creditCardNumber { get; set; }

    public string clientOrderAddress { get; set; }

    public double totalPrize { get; set; }

    public Nullable<long> clientId { get; set; }



    
    /// <summary>
    /// Relationship Name (Foreign Key in ER-Model): FK_ClientOrder_Client
    /// </summary>
    public virtual Client Client { get; set; }

    
    /// <summary>
    /// Relationship Name (Foreign Key in ER-Model): FK_ClientOrderLine_ClientOrder
    /// </summary>
    public virtual ICollection<ClientOrderLine> ClientOrderLine { get; set; }


	/// <summary>
	/// A hash code for this instance, suitable for use in hashing algorithms and data structures 
	/// like a hash table. It uses the Josh Bloch implementation from "Effective Java"
    /// Primary key of entity is not included in the hash calculation to avoid errors
	/// with Entity Framework creation of key values.
	/// </summary>
	/// <returns>
	/// Returns a hash code for this instance.
	/// </returns>
	public override int GetHashCode()
	{
	    unchecked
	    {
			int multiplier = 31;
			int hash = GetType().GetHashCode();


			hash = hash * multiplier + orderDate.GetHashCode();

			hash = hash * multiplier + (orderName == null ? 0 : orderName.GetHashCode());

			hash = hash * multiplier + (creditCardNumber == null ? 0 : creditCardNumber.GetHashCode());

			hash = hash * multiplier + (clientOrderAddress == null ? 0 : clientOrderAddress.GetHashCode());

			hash = hash * multiplier + totalPrize.GetHashCode();

			hash = hash * multiplier + (clientId == null ? 0 : clientId.GetHashCode());


			return hash;
	    }

	}

    
    /// <summary>
    /// Compare this object against another instance using a value approach (field-by-field) 
    /// </summary>
    /// <remarks>See http://www.loganfranken.com/blog/687/overriding-equals-in-c-part-1/ for detailed info </remarks>
	public override bool Equals(object obj)
	{

        if (ReferenceEquals(null, obj)) return false;        // Is Null?
        if (ReferenceEquals(this, obj)) return true;         // Is same object?
        if (obj.GetType() != this.GetType()) return false;   // Is same type?
	    
        ClientOrder target = obj as ClientOrder;

		return true
           &&  (this.orderId == target.orderId )       
           &&  (this.orderDate == target.orderDate )       
           &&  (this.orderName == target.orderName )       
           &&  (this.creditCardNumber == target.creditCardNumber )       
           &&  (this.clientOrderAddress == target.clientOrderAddress )       
           &&  (this.totalPrize == target.totalPrize )       
           &&  (this.clientId == target.clientId )       
           ;

    }



	public static bool operator ==(ClientOrder  objA, ClientOrder  objB)
    {
        // Check if the objets are the same ClientOrder entity
        if(Object.ReferenceEquals(objA, objB))
            return true;
  
        return objA.Equals(objB);
}



	public static bool operator !=(ClientOrder  objA, ClientOrder  objB)
    {
        return !(objA == objB);
    }



    /// <summary>
    /// Returns a <see cref="T:System.String"></see> that represents the 
    /// current <see cref="T:System.Object"></see>.
    /// </summary>
    /// <returns>
    /// A <see cref="T:System.String"></see> that represents the current 
    /// <see cref="T:System.Object"></see>.
    /// </returns>
	public override String ToString()
	{
	    StringBuilder strClientOrder = new StringBuilder();

		strClientOrder.Append("[ ");
       strClientOrder.Append(" orderId = " + orderId + " | " );       
       strClientOrder.Append(" orderDate = " + orderDate + " | " );       
       strClientOrder.Append(" orderName = " + orderName + " | " );       
       strClientOrder.Append(" creditCardNumber = " + creditCardNumber + " | " );       
       strClientOrder.Append(" clientOrderAddress = " + clientOrderAddress + " | " );       
       strClientOrder.Append(" totalPrize = " + totalPrize + " | " );       
       strClientOrder.Append(" clientId = " + clientId + " | " );       

        strClientOrder.Append("] ");    

		return strClientOrder.ToString();
    }



}

}
