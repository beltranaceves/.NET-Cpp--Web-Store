//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Es.Udc.DotNet.PracticaMaD.Model
{
    using System;
    using System.Text;
    using System.Collections.Generic;

    public partial class CreditCard
    {
        public CreditCard()
        {
            //this.CreditCardOps = new HashSet<CreditCardOp>();
        }

        public long CreditCardId { get; set; }
        public String CreditCardLogin { get; set; }
        public String CreditCardPassword { get; set; }
        public String CreditCardName { get; set; }
        public String firtsName { get; set; }
        public String lastName { get; set; }
        public String CreditCardAddress { get; set; }
        public String email { get; set; }
        public String CreditCardLanguage { get; set; }
        public String rol { get; set; }

        /// <summary>
        /// A hash code for this instance, suitable for use in hashing algorithms and data structures 
        /// like a hash table. It uses the Josh Bloch implementation from "Effective Java"
        /// Primary key of entity is not included in the hash calculation to avoid errors
        /// with Entity Framework creation of key values.
        /// </summary>
        /// <returns>
        /// Returns a hash code for this instance.
        /// </returns>
        public override int GetHashCode()
        {
            unchecked
            {
                int multiplier = 31;
                int hash = GetType().GetHashCode();

                hash = hash * multiplier + CreditCardId.GetHashCode();
                hash = hash * multiplier + CreditCardLogin.GetHashCode();
                hash = hash * multiplier + CreditCardPassword.GetHashCode();
                hash = hash * multiplier + CreditCardName.GetHashCode();
                hash = hash * multiplier + firtsName.GetHashCode();
                hash = hash * multiplier + CreditCardAddress.GetHashCode();
                hash = hash * multiplier + email.GetHashCode();
                hash = hash * multiplier + CreditCardLanguage.GetHashCode();
                hash = hash * multiplier + rol.GetHashCode();

                return hash;
            }

        }

        /// <summary>
        /// Compare this object against another instance using a value approach (field-by-field) 
        /// </summary>
        /// <remarks>See http://www.loganfranken.com/blog/687/overriding-equals-in-c-part-1/ for detailed info </remarks>
        public override bool Equals(object obj)
        {

            if (ReferenceEquals(null, obj)) return false;        // Is Null?
            if (ReferenceEquals(this, obj)) return true;         // Is same object?
            if (obj.GetType() != this.GetType()) return false;   // Is same type?

            CreditCard target = obj as CreditCard;

            return true
               && (this.CreditCardId == target.CreditCardId)
               && (this.CreditCardLogin == target.CreditCardLogin)
               && (this.CreditCardPassword == target.CreditCardPassword)
               && (this.CreditCardName == target.CreditCardName)
               && (this.firtsName == target.firtsName)
               && (this.lastName == target.lastName)
               && (this.CreditCardAddress == target.CreditCardAddress)
               && (this.email == target.email)
               && (this.CreditCardLanguage == target.CreditCardLanguage)
               && (this.rol == target.rol)
               ;

        }


        public static bool operator ==(CreditCard objA, CreditCard objB)
        {
            // Check if the objets are the same CreditCard entity
            if (Object.ReferenceEquals(objA, objB))
                return true;

            return objA.Equals(objB);
        }


        public static bool operator !=(CreditCard objA, CreditCard objB)
        {
            return !(objA == objB);
        }


        /// <summary>
        /// Returns a <see cref="T:System.String"></see> that represents the 
        /// current <see cref="T:System.Object"></see>.
        /// </summary>
        /// <returns>
        /// A <see cref="T:System.String"></see> that represents the current 
        /// <see cref="T:System.Object"></see>.
        /// </returns>
        public override String ToString()
        {
            StringBuilder strCreditCard = new StringBuilder();

            strCreditCard.Append("[ ");
            strCreditCard.Append(" CreditCardId = " + CreditCardId + " | ");
            strCreditCard.Append(" CreditCardLogin = " + CreditCardLogin + " | ");
            strCreditCard.Append(" CreditCardPassword = " + CreditCardPassword + " | ");
            strCreditCard.Append(" CreditCardName = " + CreditCardName + " | ");
            strCreditCard.Append(" firstName = " + firtsName + " | ");
            strCreditCard.Append(" lastName = " + lastName+ " | ");
            strCreditCard.Append(" CreditCardAddress = " + CreditCardAddress + " | ");
            strCreditCard.Append(" email = " + email + " | ");
            strCreditCard.Append(" CreditCardLanguage = " + CreditCardLanguage+ " | ");
            strCreditCard.Append(" rol = " + rol + " | ");
            strCreditCard.Append("] ");

            return strCreditCard.ToString();
        }


    }
}
