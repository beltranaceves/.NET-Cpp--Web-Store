//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Es.Udc.DotNet.PracticaMad.Model
{
    using System;
    using System.Text;
    using System.Collections.Generic;
    
    public partial class Client
    {
        public Client()
        {
            this.ClientOrder = new HashSet<ClientOrder>();
            this.ProductComment = new HashSet<ProductComment>();
            this.CreditCard = new HashSet<CreditCard>();
        }
    
        public long clientId { get; set; }
        public string clientLogin { get; set; }
        public string clientPassword { get; set; }
        public string firstName { get; set; }
        public string firstSurname { get; set; }
        public string lastSurname { get; set; }
        public string clientAddress { get; set; }
        public string email { get; set; }
        public string clientLanguage { get; set; }
        public string country { get; set; }
        public string rol { get; set; }
    
        
        /// <summary>
        /// Relationship Name (Foreign Key in ER-Model): FK_ClientOrder_Client
        /// </summary>
        public virtual ICollection<ClientOrder> ClientOrder { get; set; }
        
        /// <summary>
        /// Relationship Name (Foreign Key in ER-Model): FK_Comment_ClientId
        /// </summary>
        public virtual ICollection<ProductComment> ProductComment { get; set; }
        
        /// <summary>
        /// Relationship Name (Foreign Key in ER-Model): FK_CreditCard_Client
        /// </summary>
        public virtual ICollection<CreditCard> CreditCard { get; set; }
    
    	/// <summary>
    	/// A hash code for this instance, suitable for use in hashing algorithms and data structures 
    	/// like a hash table. It uses the Josh Bloch implementation from "Effective Java"
        /// Primary key of entity is not included in the hash calculation to avoid errors
    	/// with Entity Framework creation of key values.
    	/// </summary>
    	/// <returns>
    	/// Returns a hash code for this instance.
    	/// </returns>
    	public override int GetHashCode()
    	{
    	    unchecked
    	    {
    			int multiplier = 31;
    			int hash = GetType().GetHashCode();
    
    			hash = hash * multiplier + (clientLogin == null ? 0 : clientLogin.GetHashCode());
    			hash = hash * multiplier + (clientPassword == null ? 0 : clientPassword.GetHashCode());
    			hash = hash * multiplier + (firstName == null ? 0 : firstName.GetHashCode());
    			hash = hash * multiplier + (firstSurname == null ? 0 : firstSurname.GetHashCode());
    			hash = hash * multiplier + (lastSurname == null ? 0 : lastSurname.GetHashCode());
    			hash = hash * multiplier + (clientAddress == null ? 0 : clientAddress.GetHashCode());
    			hash = hash * multiplier + (email == null ? 0 : email.GetHashCode());
    			hash = hash * multiplier + (clientLanguage == null ? 0 : clientLanguage.GetHashCode());
    			hash = hash * multiplier + (country == null ? 0 : country.GetHashCode());
    			hash = hash * multiplier + (rol == null ? 0 : rol.GetHashCode());
    
    			return hash;
    	    }
    
    	}
        
        /// <summary>
        /// Compare this object against another instance using a value approach (field-by-field) 
        /// </summary>
        /// <remarks>See http://www.loganfranken.com/blog/687/overriding-equals-in-c-part-1/ for detailed info </remarks>
    	public override bool Equals(object obj)
    	{
    
            if (ReferenceEquals(null, obj)) return false;        // Is Null?
            if (ReferenceEquals(this, obj)) return true;         // Is same object?
            if (obj.GetType() != this.GetType()) return false;   // Is same type?
    	    
            Client target = obj as Client;
    
    		return true
               &&  (this.clientId == target.clientId )       
               &&  (this.clientLogin == target.clientLogin )       
               &&  (this.clientPassword == target.clientPassword )       
               &&  (this.firstName == target.firstName )       
               &&  (this.firstSurname == target.firstSurname )       
               &&  (this.lastSurname == target.lastSurname )       
               &&  (this.clientAddress == target.clientAddress )       
               &&  (this.email == target.email )       
               &&  (this.clientLanguage == target.clientLanguage )       
               &&  (this.country == target.country )       
               &&  (this.rol == target.rol )       
               ;
    
        }
    
    
    	public static bool operator ==(Client  objA, Client  objB)
        {
            // Check if the objets are the same Client entity
            if(Object.ReferenceEquals(objA, objB))
                return true;
      
            return objA.Equals(objB);
    }
    
    
    	public static bool operator !=(Client  objA, Client  objB)
        {
            return !(objA == objB);
        }
    
    
        /// <summary>
        /// Returns a <see cref="T:System.String"></see> that represents the 
        /// current <see cref="T:System.Object"></see>.
        /// </summary>
        /// <returns>
        /// A <see cref="T:System.String"></see> that represents the current 
        /// <see cref="T:System.Object"></see>.
        /// </returns>
    	public override String ToString()
    	{
    	    StringBuilder strClient = new StringBuilder();
    
    		strClient.Append("[ ");
           strClient.Append(" clientId = " + clientId + " | " );       
           strClient.Append(" clientLogin = " + clientLogin + " | " );       
           strClient.Append(" clientPassword = " + clientPassword + " | " );       
           strClient.Append(" firstName = " + firstName + " | " );       
           strClient.Append(" firstSurname = " + firstSurname + " | " );       
           strClient.Append(" lastSurname = " + lastSurname + " | " );       
           strClient.Append(" clientAddress = " + clientAddress + " | " );       
           strClient.Append(" email = " + email + " | " );       
           strClient.Append(" clientLanguage = " + clientLanguage + " | " );       
           strClient.Append(" country = " + country + " | " );       
           strClient.Append(" rol = " + rol + " | " );       
            strClient.Append("] ");    
    
    		return strClient.ToString();
        }
    
    
    }
}
